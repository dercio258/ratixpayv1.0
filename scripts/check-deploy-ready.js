const fs = require('fs');
const path = require('path');

function verificarDeploy() {
    console.log('üîç Verificando se o projeto est√° pronto para deploy...\n');
    
    let problemas = [];
    let avisos = [];
    let sucessos = [];
    
    // Verificar arquivos essenciais
    const arquivosEssenciais = [
        'package.json',
        'server.js',
        'render.yaml',
        '.dockerignore'
    ];
    
    arquivosEssenciais.forEach(arquivo => {
        if (fs.existsSync(arquivo)) {
            sucessos.push(`‚úÖ ${arquivo} encontrado`);
        } else {
            problemas.push(`‚ùå ${arquivo} n√£o encontrado`);
        }
    });
    
    // Verificar depend√™ncias
    if (fs.existsSync('package.json')) {
        const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        
        if (packageJson.scripts && packageJson.scripts.start) {
            sucessos.push('‚úÖ Script start configurado');
        } else {
            problemas.push('‚ùå Script start n√£o configurado');
        }
        
        if (packageJson.dependencies) {
            const dependenciasEssenciais = ['express', 'cors', 'sqlite3'];
            dependenciasEssenciais.forEach(dep => {
                if (packageJson.dependencies[dep]) {
                    sucessos.push(`‚úÖ Depend√™ncia ${dep} encontrada`);
                } else {
                    avisos.push(`‚ö†Ô∏è  Depend√™ncia ${dep} n√£o encontrada`);
                }
            });
        }
    }
    
    // Verificar estrutura de diret√≥rios
    const diretorios = [
        'routes',
        'models',
        'database',
        'public',
        'utils'
    ];
    
    diretorios.forEach(dir => {
        if (fs.existsSync(dir)) {
            sucessos.push(`‚úÖ Diret√≥rio ${dir} encontrado`);
        } else {
            avisos.push(`‚ö†Ô∏è  Diret√≥rio ${dir} n√£o encontrado`);
        }
    });
    
    // Verificar arquivo .env
    if (fs.existsSync('.env')) {
        sucessos.push('‚úÖ Arquivo .env encontrado');
    } else {
        avisos.push('‚ö†Ô∏è  Arquivo .env n√£o encontrado (crie um para desenvolvimento)');
    }
    
    // Verificar banco de dados
    if (fs.existsSync('database/ratixpay.db')) {
        sucessos.push('‚úÖ Banco de dados SQLite encontrado');
    } else {
        avisos.push('‚ö†Ô∏è  Banco de dados SQLite n√£o encontrado (ser√° criado automaticamente)');
    }
    
    // Verificar configura√ß√µes de seguran√ßa
    const serverContent = fs.readFileSync('server.js', 'utf8');
    if (serverContent.includes('cors')) {
        sucessos.push('‚úÖ CORS configurado');
    } else {
        avisos.push('‚ö†Ô∏è  CORS n√£o configurado');
    }
    
    if (serverContent.includes('helmet') || serverContent.includes('security')) {
        sucessos.push('‚úÖ Configura√ß√µes de seguran√ßa encontradas');
    } else {
        avisos.push('‚ö†Ô∏è  Configura√ß√µes de seguran√ßa b√°sicas (recomendado adicionar helmet)');
    }
    
    // Exibir resultados
    console.log('üìã RESULTADOS DA VERIFICA√á√ÉO:\n');
    
    if (sucessos.length > 0) {
        console.log('‚úÖ SUCESSOS:');
        sucessos.forEach(s => console.log(`   ${s}`));
        console.log('');
    }
    
    if (avisos.length > 0) {
        console.log('‚ö†Ô∏è  AVISOS:');
        avisos.forEach(a => console.log(`   ${a}`));
        console.log('');
    }
    
    if (problemas.length > 0) {
        console.log('‚ùå PROBLEMAS:');
        problemas.forEach(p => console.log(`   ${p}`));
        console.log('');
    }
    
    // Resumo final
    console.log('üìä RESUMO:');
    console.log(`   ‚úÖ Sucessos: ${sucessos.length}`);
    console.log(`   ‚ö†Ô∏è  Avisos: ${avisos.length}`);
    console.log(`   ‚ùå Problemas: ${problemas.length}`);
    
    if (problemas.length === 0) {
        console.log('\nüéâ PROJETO PRONTO PARA DEPLOY!');
        console.log('\nüìã PR√ìXIMOS PASSOS:');
        console.log('   1. Execute: node scripts/generate-keys.js');
        console.log('   2. Configure as vari√°veis de ambiente no Render');
        console.log('   3. Fa√ßa push para o reposit√≥rio Git');
        console.log('   4. Configure o deploy no Render');
        console.log('   5. Configure o dom√≠nio no Hostinger');
    } else {
        console.log('\nüîß CORRIJA OS PROBLEMAS ANTES DO DEPLOY');
    }
    
    // Verificar tamanho do projeto
    const stats = fs.statSync('.');
    const tamanhoMB = (stats.size / (1024 * 1024)).toFixed(2);
    console.log(`\nüì¶ Tamanho do projeto: ${tamanhoMB} MB`);
    
    if (parseFloat(tamanhoMB) > 100) {
        avisos.push('‚ö†Ô∏è  Projeto muito grande (considere otimizar)');
    }
}

if (require.main === module) {
    verificarDeploy();
}

module.exports = { verificarDeploy }; 