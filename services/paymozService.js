const axios = require('axios');
const config = require('../config/paymoz');

class PayMozService {
    constructor() {
        this.config = config;
        this.client = axios.create({
            baseURL: config.baseUrl,
            timeout: config.timeout,
            headers: config.headers
        });
    }

    /**
     * Processa pagamento via M-Pesa
     * @param {string} numeroCelular - N√∫mero do celular
     * @param {number} valor - Valor do pagamento
     * @returns {Promise<Object>} - Resposta da API
     */
    async processarPagamentoMpesa(numeroCelular, valor) {
        try {
            console.log(`üîÑ Processando pagamento M-Pesa: ${numeroCelular} - MZN ${valor}`);
            
            const response = await this.client.post(config.endpoints.mpesa, {
                numero_celular: numeroCelular,
                valor: valor
            });

            console.log(`‚úÖ Pagamento M-Pesa processado:`, response.data);
            return {
                success: true,
                data: response.data,
                metodo: 'mpesa'
            };
        } catch (error) {
            console.error(`‚ùå Erro no pagamento M-Pesa:`, error.response?.data || error.message);
            return {
                success: false,
                error: error.response?.data || error.message,
                metodo: 'mpesa'
            };
        }
    }

    /**
     * Processa pagamento via e-Mola
     * @param {string} numeroCelular - N√∫mero do celular
     * @param {number} valor - Valor do pagamento
     * @returns {Promise<Object>} - Resposta da API
     */
    async processarPagamentoEmola(numeroCelular, valor) {
        try {
            console.log(`üîÑ Processando pagamento e-Mola: ${numeroCelular} - MZN ${valor}`);
            
            const response = await this.client.post(config.endpoints.emola, {
                numero_celular: numeroCelular,
                valor: valor
            });

            console.log(`‚úÖ Pagamento e-Mola processado:`, response.data);
            return {
                success: true,
                data: response.data,
                metodo: 'emola'
            };
        } catch (error) {
            console.error(`‚ùå Erro no pagamento e-Mola:`, error.response?.data || error.message);
            return {
                success: false,
                error: error.response?.data || error.message,
                metodo: 'emola'
            };
        }
    }

    /**
     * Processa pagamento baseado no m√©todo escolhido
     * @param {string} metodo - M√©todo de pagamento (mpesa ou emola)
     * @param {string} numeroCelular - N√∫mero do celular
     * @param {number} valor - Valor do pagamento
     * @returns {Promise<Object>} - Resposta da API
     */
    async processarPagamento(metodo, numeroCelular, valor) {
        // Validar m√©todo
        if (!['mpesa', 'emola'].includes(metodo)) {
            return {
                success: false,
                error: 'M√©todo de pagamento inv√°lido. Use "mpesa" ou "emola".',
                metodo: metodo
            };
        }

        // Validar n√∫mero de celular
        if (!this.validarNumeroCelular(numeroCelular)) {
            return {
                success: false,
                error: 'N√∫mero de celular inv√°lido. Use formato: 84xxxxxxx',
                metodo: metodo
            };
        }

        // Validar valor
        if (!this.validarValor(valor)) {
            return {
                success: false,
                error: 'Valor inv√°lido. Deve ser maior que 0.',
                metodo: metodo
            };
        }

        // Processar pagamento baseado no m√©todo
        if (metodo === 'mpesa') {
            return await this.processarPagamentoMpesa(numeroCelular, valor);
        } else if (metodo === 'emola') {
            return await this.processarPagamentoEmola(numeroCelular, valor);
        }
    }

    /**
     * Valida n√∫mero de celular mo√ßambicano
     * @param {string} numero - N√∫mero do celular
     * @returns {boolean} - Se √© v√°lido
     */
    validarNumeroCelular(numero) {
        // Formato mo√ßambicano: 84xxxxxxx ou +25884xxxxxxx
        const regex = /^(\+258)?8[4-7]\d{7}$/;
        return regex.test(numero);
    }

    /**
     * Valida valor do pagamento
     * @param {number} valor - Valor do pagamento
     * @returns {boolean} - Se √© v√°lido
     */
    validarValor(valor) {
        return typeof valor === 'number' && valor > 0;
    }

    /**
     * Formata n√∫mero de celular para o formato esperado pela API
     * @param {string} numero - N√∫mero do celular
     * @returns {string} - N√∫mero formatado
     */
    formatarNumeroCelular(numero) {
        // Remove caracteres n√£o num√©ricos
        let numeroLimpo = numero.replace(/\D/g, '');
        
        // Se come√ßar com 258, remove
        if (numeroLimpo.startsWith('258')) {
            numeroLimpo = numeroLimpo.substring(3);
        }
        
        // Se n√£o come√ßar com 8, adiciona 84 como padr√£o
        if (!numeroLimpo.startsWith('8')) {
            numeroLimpo = '84' + numeroLimpo;
        }
        
        return numeroLimpo;
    }
}

module.exports = new PayMozService(); 